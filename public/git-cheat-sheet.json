[{
   "category": "Install GIT",
   "description": "Install git for all platforms: http://git-scm.com"
},
{
    "category": "Configure Tooling",
    "command": "git config --global user.name [name]",
    "description": "Sets the name you want attached to your commit transaction"
 },
 {
    "category": "Configure Tooling",
    "command": "git config --global user.email [email address]",
    "description": "Sets the email you want atached to your commit transactions"
 },
 {
    "category": "Configure Tooling",
    "command": "git config --global color.ui auto",
    "description": "Enables helpful colorization of command line output"
 },
 {
    "category": "Create Repositories",
    "command": "git init [project-name]",
    "description": "Creates a new local repository with the specified name"
 },
 {
    "category": "Create Repositories",
    "command": "git clone [url]",
    "description": "Downloads a project and its entire version history"
 },
 {
    "category": "Make Changes",
    "command": "git status",
    "description": "Lists all new or modified files to be commited"
 },
 {
    "category": "Make Changes",
    "command": "git diff",
    "description": "Shows file differences not yet staged"
 },
 {
    "category": "Make Changes",
    "command": "git add [file]",
    "description": "Snapshots the file in preparation for versioning"
 },
 {
    "category": "Make Changes",
    "command": "git diff --staged",
    "description": "Shows file differences between staging and the last file version"
 },
 {
    "category": "Make Changes",
    "command": "git reset [file]",
    "description": "Unstages the file, but preserve its contents"
 },
 {
    "category": "Make Changes",
    "command": "git commit -m [descriptive message]",
    "description": "Records file snapshots permanently in version history"
 },
 {
    "category": "Branches",
    "command": "git branch",
    "description": "Lists all local branches in the current repository"
 },
 {
    "category": "Branches",
    "command": "git branch [branch-name]",
    "description": "Switches to the specified branch"
 },
 {
    "category": "Branches",
    "command": "git -b branch [branch-name]",
    "description": "Creates a new branch with the specified name"
 },
 {
    "category": "Branches",
    "command": "git merge [branch-name]",
    "description": "Merges the specified branchâ€™s history into the current branch"
 },
 {
    "category": "Branches",
    "command": "git branch -d [branch-name]",
    "description": "Deletes the specified branch, locally"
 },
 {
    "category": "Moving and removing files",
    "command": "git rm [file]",
    "description": "Deletes the file from the working directory and stages the deletion"
 },
 {
    "category": "Moving and removing files",
    "command": "git rm --cached [file]",
    "description": "Removes the file from version control but preserves the file locally"
 },
 {
    "category": "Moving and removing files",
    "command": "git mv [from] [to]",
    "description": "Renames the file"
 },
 {
    "category": "Stashing",
    "command": "git stash",
    "description": "Temporarily stores all modified tracked files"
 },
 {
    "category": "Stashing",
    "command": "git stash pop",
    "description": "Restores the most last stashed files"
 },
 {
    "category": "Stashing",
    "command": "git stash list",
    "description": "Lists all stashed changesets"
 },
 {
    "category": "Stashing",
    "command": "git stash drop",
    "description": "Deletes the last stashed changeset"
 },
 {
    "category": "History and diff",
    "command": "git log",
    "description": "Lists version history for the current branch"
 },
 {
    "category": "History and diff",
    "command": "$ git log --follow [file]",
    "description": "Lists version history for a file, including renames"
 },
 {
    "category": "History and diff",
    "command": "git diff [first-branch]...[second-branch]",
    "description": "Shows content differences between two branches"
 },
 {
    "category": "History and diff",
    "command": "git show [commit]",
    "description": "Shows changes of the specified commit"
 },
 {
    "category": "Cancel and redo stuffs",
    "command": "git reset [commit]",
    "description": "Undoes all commits afer [commit], preserving changes locally"
 },
 {
    "category": "Cancel and redo stuffs",
    "command": "git reset --hard [commit]",
    "description": "Discards all history and changes back to the specified commit"
 },
 {
    "category": "Synchronization and remote respositories",
    "command": "git push [alias] [branch]",
    "description": "Pushes all local changesets to the remote repository"
 },
 {
    "category": "Synchronization and remote respositories",
    "command": "git pull",
    "description": "Downloads new remote history and incorporate changes"
 }]